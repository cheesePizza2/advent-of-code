(defun parse-file (file)
  (let ((f (mapcar #'(lambda (s) (coerce s 'list)) (uiop:read-file-lines file)))
        (map nil)
        (ins nil)
        (mapping t))
    (loop for item in f
          if mapping do (if (null item) (setf mapping nil) (setf map (cons item map)))
          else do (setf ins (append ins item)))
    (setf map (reverse map))
    (list map ins)))

(defvar *walls* nil)
(defvar *boxes* nil)
(defvar *robpos* nil)

(defun map-to-vars (map)
  (setf *walls* nil *boxes* nil *robpos* nil)
  (loop for y from 0 to (- (length map) 1)
        do (loop for x from 0 to (- (length (first map)) 1)
                 do (case (nth x (nth y map))
                      (#\# (setf *walls* (cons (list x y) *walls*)))
                      (#\O (setf *boxes* (cons (list x y) *boxes*)))
                      (#\@ (setf *robpos* (list x y)))))))

(defun get-pos-at-dir (pos dir)
  (case dir
    (#\^ (list (first pos) (- (second pos) 1)))
    (#\> (list (+ (first pos) 1) (second pos)))
    (#\v (list (first pos) (+ (second pos) 1)))
    (#\< (list (- (first pos) 1) (second pos)))))

(defun get-empty-space (pos dir)
  (cond ((member pos *walls* :test #'equal) nil)
        ((member pos *boxes* :test #'equal) (get-empty-space (get-pos-at-dir pos dir) dir))
        (t pos)))

(defun try-move-boxes (dir)
  (let ((es (get-empty-space (get-pos-at-dir *robpos* dir) dir)))
    (if (null es)
        nil
        (setf *boxes* (cons es (remove (get-pos-at-dir *robpos* dir) *boxes* :test #'equal))
              *robpos* (get-pos-at-dir *robpos* dir)))))

(defun try-move (dir)
  (cond ((member (get-pos-at-dir *robpos* dir) *walls* :test #'equal) nil)
        ((member (get-pos-at-dir *robpos* dir) *boxes* :test #'equal) (try-move-boxes dir))
        (t (setf *robpos* (get-pos-at-dir *robpos* dir)))))

(defun sum-gps-boxes ()
  (reduce #'+ (mapcar #'(lambda (b) (+ (first b) (* 100 (second b)))) *boxes*)))

(defun part1 (file)
  (let ((ps (parse-file file)))
    (map-to-vars (first ps))
    (mapcar #'try-move (second ps))
    (sum-gps-boxes)))

(defun map-to-vars-2 (map)
  (setf *walls* nil *boxes* nil *robpos* nil)
  (loop for y from 0 to (- (length map) 1)
        do (loop for x from 0 to (- (length (first map)) 1)
                 do (case (nth x (nth y map))
                      (#\# (setf *walls* (cons (list (+ (* x 2) 1) y) (cons (list (* x 2) y) *walls*))))
                      (#\O (setf *boxes* (cons (list (* x 2) y) *boxes*)))
                      (#\@ (setf *robpos* (list (* x 2) y)))))))

(defun check-boxes-vert (pos dir)
  (cond ((member pos *walls* :test #'equal) nil)
        ((member pos *boxes* :test #'equal) (and (check-boxes-vert (get-pos-at-dir pos dir) dir)
                                                 (check-boxes-vert (get-pos-at-dir (get-pos-at-dir pos #\>) dir) dir)))
        ((member (get-pos-at-dir pos #\<) *boxes* :test #'equal) (and (check-boxes-vert (get-pos-at-dir pos dir) dir)
                                                                      (check-boxes-vert (get-pos-at-dir (get-pos-at-dir pos #\<) dir) dir)))
        (t t)))

(defun move-boxes-vert (pos dir)
  (cond ((member pos *boxes* :test #'equal) (progn (move-boxes-vert (get-pos-at-dir pos dir) dir)
                                                   (move-boxes-vert (get-pos-at-dir (get-pos-at-dir pos #\>) dir) dir)
                                                   (setf *boxes* (cons (get-pos-at-dir pos dir) (remove pos *boxes* :test #'equal)))))
        ((member (get-pos-at-dir pos #\<) *boxes* :test #'equal) (progn (move-boxes-vert (get-pos-at-dir pos dir) dir)
                                                                        (move-boxes-vert (get-pos-at-dir (get-pos-at-dir pos #\<) dir) dir)
                                                                        (setf *boxes* (cons (get-pos-at-dir (get-pos-at-dir pos #\<) dir) (remove (get-pos-at-dir pos #\<) *boxes* :test #'equal)))))))

(defun check-move-boxes-right (pos)
  (cond ((member pos *walls* :test #'equal) nil)
        ((member pos *boxes* :test #'equal) (when (check-move-boxes-right (list (+ (first pos) 2) (second pos)))
                                                  (setf *boxes* (cons (list (+ (first pos) 1) (second pos)) (remove pos *boxes* :test #'equal)))))
        (t t)))

(defun check-move-boxes-left (pos)
  (cond ((member pos *walls* :test #'equal) nil)
        ((member pos *boxes* :test #'equal) (unless (member (list (- (first pos) 1) (second pos)) *walls* :test #'equal)                                              
                                              (when (or (member (list (- (first pos) 2) (second pos)) *walls* :test #'equal) (check-move-boxes-left (list (- (first pos) 2) (second pos))))
                                                (setf *boxes* (cons (list (- (first pos) 1) (second pos)) (remove pos *boxes* :test #'equal))))))
        (t t)))

(defun try-move-boxes-2 (dir)
  (when (case dir
          (#\< (check-move-boxes-left (list (- (first *robpos*) 2) (second *robpos*))))
          (#\> (check-move-boxes-right (list (+ (first *robpos*) 1) (second *robpos*))))
          (otherwise (when (check-boxes-vert (get-pos-at-dir *robpos* dir) dir) (move-boxes-vert (get-pos-at-dir *robpos* dir) dir))))
    (setf *robpos* (get-pos-at-dir *robpos* dir))))

(defun try-move-2 (dir)
  (cond ((member (get-pos-at-dir *robpos* dir) *walls* :test #'equal) nil)
        ((or (member (get-pos-at-dir *robpos* dir) *boxes* :test #'equal)
             (member (get-pos-at-dir (get-pos-at-dir *robpos* dir) #\<) *boxes* :test #'equal)) (try-move-boxes-2 dir))
        (t (setf *robpos* (get-pos-at-dir *robpos* dir)))))

(defun part2 (file)
  (let ((ps (parse-file file)))
    (map-to-vars-2 (first ps))
    (mapcar #'try-move-2 (second ps))
    (sum-gps-boxes)))
